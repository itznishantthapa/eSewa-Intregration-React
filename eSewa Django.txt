
-------------Prompt for invalid signature------------------------------------------------

Yes after i run this project and try to order , it says this error:
 ```Pretty print (checkbox)
{"code":"ES104","message":"Invalid payload signature."} ```

I think the signature how we generate is not correctly setup according to eSewa how it checks , so we need to work on that; here is a Django file a person has done in python so by reading and understanding how the signature is generated and implemented , we potentially can solve this error . I have provided the Django file in the Text formate read understand the concepts.@eSewa Django.txt 
------------------------------------------------------------------------------------------

Directory structure:
└── hehenischal-django-esewa/
    ├── README.md
    ├── LICENSE
    ├── MANIFEST.in
    ├── setup.py
    ├── esewa/
    │   ├── Exceptions.py
    │   ├── __init__.py
    │   ├── payment.py
    │   ├── signature.py
    │   └── utils.py
    └── esewa_tests/
        ├── __init__.py
        └── test_signature.py
================================================
File: README.md
================================================
# Django-esewa

A simple, developer-friendly package for integrating the eSewa Payment Gateway into Django applications.

## Overview

`django-esewa` was developed by Nischal Lamichhane to simplify eSewa integration for Python/Django developers. It aims to handle common payment gateway tasks like generating HMAC signatures, verifying transactions, and status checks (in future versions).

## Features

- **HMAC Key Generation**: Easily generate the signature required for eSewa requests.
- **Customization**: Configure secret keys, product codes, success URLs, and failure URLs.

### Future Goals

- Transaction status verification.
- Improved documentation for all class methods.

## QuickStart

```bash
pip install django-esewa
```

Note: Ensure you have added necessary settings like `ESEWA_SECRET_KEY`, `ESEWA_SUCCESS_URL`, and `ESEWA_FAILURE_URL` in your `settings.py`.

Even though you can use the `generate_signature` function without creating an object of `EsewaPayment`, if you want to use other features, you need to add `ESEWA_SUCCESS_URL`, `ESEWA_FAILURE_URL` (will fallback to `localhost:8000/success/` & `localhost:8000/failure/`) & `ESEWA_SECRET_KEY` (will fall back to `'8gBm/:&EnhH.1/q'`).

```python
ESEWA_SUCCESS_URL = "localhost:8000/success/"
ESEWA_FAILURE_URL = "localhost:8000/failure/"
ESEWA_SECRET_KEY = "<Custom_key_from_Esewa>"
```
---
## Usage

### Generating HTML Form
 > Views.py
```python 
from esewa import EsewaPayment

def confirm_order(request,id):
    order = Order.objects.get(id=id)
   

    payment = EsewaPayment(
        product_code=order.code,
        success_url="http://yourdomain.com/success/",
        failure_url="http://yourdomain.com/failure/",
        secret_key="your_secret_key"
    )
    payment.create_signature(
        order.amount,
        order.uuid
    )

    context = {
        'form':payment.generate_form()
    }
    return render(request,'order/checkout.html',context)
```
> order/checkout.html
```html
<form action="https://rc-epay.esewa.com.np/api/epay/main/v2/form" method="POST">
    {{form|safe}}
    <button type="submit">Pay with Esewa </button>
</form>
```
---

### Generating a Signature

The `generate_signature` function helps create the HMAC signature required by eSewa for secure transactions.

**Function Signature:**

```python
def generate_signature(
    total_amount: float,
    transaction_uuid: str,
    key: str = "8gBm/:&EnhH.1/q",
    product_code: str = "EPAYTEST"
) -> str:
```

**Example:**

```python
from esewa import generate_signature

# During Development
signature = generate_signature(1000, "123abc")

# In Production
signature = generate_signature(1000, "123abc", "<your_private_key>", "<product_code>")
```
---
### Using the EsewaPayment Class

`EsewaPayment` provides additional configuration options for success and failure URLs.
List of all methods in EsewaPayment:
- `__init__()`
- `create_signature()`
- `generate_form()`
- `get_status()`
- `is_completed()`
- `verify_signature()`
- `log_transaction()`
- `__eq__()`

List of In-development methods:
- `generate_redirect_url()`
- `refund_payment()`
- `simulate_payment()`

---

**Initialization:**

```python
from esewa import EsewaPayment

payment = EsewaPayment(
    product_code="EPAYTEST",
    success_url="http://yourdomain.com/success/",
    failure_url="http://yourdomain.com/failure/",
    secret_key="your_secret_key"
)
```

### Settings

To use custom configurations, add the following keys to your `settings.py`:

```python
# settings.py

ESEWA_SECRET_KEY = "your_secret_key"
ESEWA_SUCCESS_URL = "http://yourdomain.com/success/"
ESEWA_FAILURE_URL = "http://yourdomain.com/failure/"
```

If these settings are missing, the package will use the following defaults:

- `ESEWA_SECRET_KEY`: `"8gBm/:&EnhH.1/q"`
- `ESEWA_SUCCESS_URL`: `"http://localhost:8000/success/"`
- `ESEWA_FAILURE_URL`: `"http://localhost:8000/failure/"`

--- 
## Contributing

### Current To-Do List

- Write documentation for all methods in the `EsewaPayment` class.
- Add refund method

### How to Contribute

1. Fork this repository.
2. Create a feature branch.
3. Commit your changes with clear messages.
4. Submit a pull request (PR) with a detailed description of your changes.

## Credits

`django-esewa` is maintained by Nischal Lamichhane. This package was created as a last-ditch effort to help Python/Django developers integrate eSewa Payment Gateway efficiently.


================================================
File: LICENSE
================================================
MIT License

Copyright (c) 2024 Nischal Lamichhane

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to view
the Software, including the rights to use, modify, and distribute the Software,
provided that any modifications are submitted via a fork and merge request.
Blatant and non-additive copying is not allowed.




================================================
File: MANIFEST.in
================================================
include README.md
include LICENSE



================================================
File: setup.py
================================================
from setuptools import setup, find_packages

setup(
    name="django-esewa",
    version="1.0.3",
    packages=find_packages(),
    include_package_data=True,
    install_requires=[
        "Django>=3.0", 
        "requests>=2.25.1",  
        "cryptography>=3.4",
    ],
    description="A Django utility for eSewa signature generation.",
    long_description=open("README.md").read(),
    long_description_content_type="text/markdown",
    author="Nischal Lamichhane",
    author_email="nischallc56@gmail.com",
    url="https://github.com/hehenischal/django-esewa",
    classifiers=[
        "Development Status :: 3 - Alpha",
        "Framework :: Django",
        "Programming Language :: Python :: 3.8",
        "License :: OSI Approved :: MIT License",
        "Topic :: Software Development :: Libraries :: Python Modules",
    ],
    python_requires=">=3.6",
)



================================================
File: esewa/Exceptions.py
================================================
class InvalidSyntaxError(Exception):
    def __init__(self, message):
        self.message = message
        super().__init__(self.message)

class InvalidSignatureError(Exception):
    def __init__(self, message):
        self.message = message
        super().__init__(self.message)

class PaymentError(Exception):
    def __init__(self, message):
        self.message = message
        super().__init__(self.message)

class RefundError(Exception):
    def __init__(self, message):
        self.message = message
        super().__init__(self.message)


================================================
File: esewa/__init__.py
================================================
__version__ = "1.0.3"

from .signature import generate_signature, verify_signature
from .payment import EsewaPayment


================================================
File: esewa/payment.py
================================================
import base64
import requests
from django.conf import settings
import logging
import requests
import json
from .signature import generate_signature

class EsewaPayment:
    '''
    A class to handle eSewa payment processing.

    Attributes:
        secret_key (str): Secret key for HMAC signature generation.
        product_code (str): Your Product Code.
        success_url (str): URL to redirect on successful payment.
        failure_url (str): URL to redirect on failed payment.
        amount (float): The total amount for the transaction.
        uuid (str): A unique identifier for the transaction.
        signature (str): The generated signature.

    Methods:
        __init__(self, product_code, success_url, failure_url, secret_key): Initializes the EsewaPayment class.
        create_signature(self, total_amount, transaction_uuid): Creates a signature for the payment request.
        generate_redirect_url(self): Generates a redirect URL for eSewa payment.
        refund_payment(self): Initiates a refund for a transaction.
        simulate_payment(self): Simulates a payment for testing purposes.
        generate_form(self): Generates a form for eSewa payment.
        get_status(self, dev): Fetches the transaction status from eSewa.
        is_completed(self, dev): Checks if the transaction is completed.
        __eq__(self, value): Compare this EsewaPayment instance with another instance for equality.
        verify_signature(self, response_body_base64): Verifies the signature of an eSewa response.
        log_transaction(self): Logs the transaction details.
    
    Usage:
        payment = EsewaPayment()
        signature = payment.create_signature(100, "11-201-13")
        payload = payment.generate_form()
        status = payment.get_status(dev=True)
        completed = payment.is_completed(dev=True)

    '''
    def __init__(self, product_code="EPAYTEST", success_url=None, failure_url=None, secret_key=None) -> None:
        """
        Initializes the EsewaPayment class with the provided parameters or defaults.

        Args:
            product_code (str): Your Product Code.
            success_url (str): URL to redirect on successful payment.
            failure_url (str): URL to redirect on failed payment.
            secret_key (str): Secret Key for HMAC signature generation.
        
        Returns:
            None
        
        Steps:
            1. Check if the secret_key is provided.
            2. If not, check if ESEWA_SECRET_KEY is set in settings.
            3. If neither is provided, use a default secret key.
            4. Check if the success_url is provided.
            5. If not, check if ESEWA_SUCCESS_URL is set in settings.
            6. If neither is provided, use a default success URL.
            7. Check if the failure_url is provided.
            8. If not, check if ESEWA_FAILURE_URL is set in settings.
            9. If neither is provided, use a default failure URL.
        """
        # Handle secret key
        if secret_key:
            self.secret_key = secret_key
            print("Secret key is provided")
        else:
            logger = logging.getLogger(__name__)
            if not hasattr(settings, 'ESEWA_SECRET_KEY'):
                logger.warning(
                    "Using default secret key for EsewaPayment. "
                    "Please set ESEWA_SECRET_KEY in settings."
                )
            self.secret_key = secret_key or getattr(settings, 'ESEWA_SECRET_KEY', "8gBm/:&EnhH.1/q")
        
        # Handle success URL
        if success_url:
            self.success_url = success_url
            print("Success URL is provided")
        else:
            logger = logging.getLogger(__name__)
            if not hasattr(settings, 'ESEWA_SUCCESS_URL'):
                logger.warning(
                    "Using default success URL for EsewaPayment. "
                    "Please set ESEWA_SUCCESS_URL in settings."
                )
            self.success_url = success_url or getattr(settings, 'ESEWA_SUCCESS_URL', "http://localhost:8000/success/")
        
        # Handle failure URL
        if failure_url:
            self.failure_url = failure_url
            print("Failure URL is provided")
        else:
            logger = logging.getLogger(__name__)
            if not hasattr(settings, 'ESEWA_FAILURE_URL'):
                logger.warning(
                    "Using default failure URL for EsewaPayment. "
                    "Please set ESEWA_FAILURE_URL in settings."
                )
            self.failure_url = failure_url or getattr(settings, 'ESEWA_FAILURE_URL', "http://localhost:8000/failure/")
        self.product_code = product_code


    
    def create_signature(
            self, 
            total_amount: float, 
            transaction_uuid: str
            ) -> str:
        """
        Creates a signature for the payment request.

        Args:
            total_amount (float): The total amount for the transaction.
            transaction_uuid (str): A unique identifier for the transaction.

        Returns:
            str: The generated signature.

        Steps:
            1. Set the amount and UUID attributes.
            2. Generate the signature using the provided parameters.
            3. Return the generated signature.
        """
        self.amount = total_amount
        self.uuid = transaction_uuid
        self.signature = generate_signature(total_amount, transaction_uuid, self.secret_key, self.product_code)
        return self.signature

    
    def generate_redirect_url() -> None:
        pass

    def refund_payment() -> None:
        pass

    def simulate_payment() -> None:
        pass

    def generate_form(self) -> str:
        """
        Generates a form for eSewa payment.

        Args:
            None

        Returns:
            str: A HTML code snippet to create a hidden form with necessary fields.
        
        Steps:
            1. Create a payload dictionary with the required fields.
            2. Initialize an empty string for the form.
            3. Iterate over the payload items and append hidden input fields to the form string.
            4. Return the form string.
        """
        payload = {
            "amount": self.amount,
            "product_delivery_charge": "0",
            "product_service_charge": "0",
            "total_amount": self.amount,
            "tax_amount": 0,
            "product_code": self.product_code,
            "transaction_uuid": self.uuid,
            "success_url": self.success_url,
            "failure_url": self.failure_url,
            "signed_field_names": "total_amount,transaction_uuid,product_code",
            "signature": self.signature
        }

        form= ""
        for key, value in payload.items():
            form += f'<input type="hidden" name="{key}" value="{value}">'
        return form


    def get_status(self, dev: bool) -> str:
        """
        Fetches the transaction status from eSewa.

        Args:
            dev (bool): Use the testing environment if True, production otherwise.

        Returns:
            str: The transaction status.

        Steps:
            1. Constructs the status URL based on the environment (testing or production).
            2. Sends a GET request to the eSewa API.
            3. Checks the response status code.
            4. Parses the JSON response.
            5. Returns the transaction status.
            6. Raises an exception if the request fails.
        """
        status_url_testing = f"https://uat.esewa.com.np/api/epay/transaction/status/?product_code={self.product_code}&total_amount={self.amount}&transaction_uuid={self.uuid}"
        status_url_prod = f"https://epay.esewa.com.np/api/epay/transaction/status/?product_code={self.product_code}&total_amount={self.amount}&transaction_uuid={self.uuid}"

        url = status_url_testing if dev else status_url_prod
        response = requests.get(url)

        if response.status_code != 200:
            raise requests.exceptions.RequestException(f"Error fetching status: {response.text}")

        response_data = response.json()
        return response_data.get("status", "UNKNOWN")


    def is_completed(self, dev: bool) -> bool:
        """
        Checks if the transaction is completed.

        Args:
            dev (bool): Use the testing environment if True, production otherwise.
        Returns:
            bool: True if the transaction is completed, False otherwise.
        Steps:
            1. Calls the get_status method to fetch the transaction status.
            2. Checks if the status is "COMPLETE".
            3. Returns True if completed, False otherwise.
        """
        return self.get_status(dev) == "COMPLETE"

    def __eq__(self, value: object) -> bool:
        """
        Compare this EsewaPayment instance with another instance for equality.

        Args:
            value (object): The object to compare with.

        Returns:
            bool: True if the given object is an instance of EsewaPayment and has the same
                secret_key and product_code as this instance, False otherwise.

        Steps:
            1. Check if the given object is an instance of EsewaPayment.
            2. Compare the secret_key and product_code attributes.
            3. Return True if both attributes match, False otherwise.
        """
        ''''''
        if not isinstance(value, EsewaPayment):
            return False
        return self.secret_key == value.secret_key and self.product_code == value.product_code
        
    def verify_signature(
            self,
        response_body_base64: str,
    ) -> tuple[bool, dict[str, str] | None]:
        """
        Verifies the signature of an eSewa response.
        
        Args:
            response_body_base64 (str): The Base64-encoded response body.
        
        Returns:
            tuple[bool, dict[str, str] | None]: 
                A tuple where the first element is a boolean indicating the validity of the signature,
                and the second element is a dictionary of the decoded response data if the signature is valid, otherwise None.

        Steps:
            1. Decode the Base64-encoded response body.
            2. Parse the JSON response.
            3. Extract the signed field names and received signature.
            4. Construct the message to be signed.
            5. Compare the received signature with the generated signature.
            6. Return a tuple with the validity and response data if valid, otherwise None.
        """
        try:
            response_body_json = base64.b64decode(response_body_base64).decode("utf-8")
            response_data: dict[str, str] = json.loads(response_body_json)
            
            signed_field_names: str = response_data["signed_field_names"]
            received_signature: str = response_data["signature"]
            
            field_names = signed_field_names.split(",")
            message: str = ",".join(
                f"{field_name}={response_data[field_name]}" for field_name in field_names
            )
            is_valid: bool = received_signature == self.signature
            return is_valid, response_data if is_valid else None
        except Exception as e:
            print(f"Error verifying signature: {e}")
            return False, None


    def log_transaction(self):
        """
        Logs the transaction details.

        Args:
            None

        Returns:
            None

        Steps:
            1. Get a logger instance.
            2. Log the transaction details.
        """
        logger = logging.getLogger(__name__)
        logger.info({
            "Transaction UUID": self.uuid,
            "Product Code": self.product_code,
            "Total Amount": self.amount,
            "Signature": self.signature
        })


if __name__ == "__main__":
    payment = EsewaPayment()
    signature = payment.create_signature(100, "11-201-13")
    print(f"Generated Signature: {signature}")
    payload = payment.generate_form()
    print(f"Generated Payload: {payload}")
    status = payment.get_status(dev=True)
    print(f"Transaction Status: {status}")
    completed = payment.is_completed(dev=True)
    print(f"Transaction Completed: {completed}")
    verified, response_data = payment.verify_signature("eyJ0cmFuc2FjdGlvbl9jb2RlIjoiMExENUNFSCIsInN0YXR1cyI6IkNPTVBMRVRFIiwidG90YWxfYW1vdW50IjoiMSwwMDAuMCIsInRyYW5zYWN0aW9uX3V1aWQiOiIyNDA2MTMtMTM0MjMxIiwicHJvZHVjdF9jb2RlIjoiTlAtRVMtQUJISVNIRUstRVBBWSIsInNpZ25lZF9maWVsZF9uYW1lcyI6InRyYW5zYWN0aW9uX2NvZGUsc3RhdHVzLHRvdGFsX2Ftb3VudCx0cmFuc2FjdGlvbl91dWlkLHByb2R1Y3RfY29kZSxzaWduZWRfZmllbGRfbmFtZXMiLCJzaWduYXR1cmUiOiJNcHd5MFRGbEhxcEpqRlVER2ljKzIybWRvZW5JVFQrQ2N6MUxDNjFxTUFjPSJ9 ")





================================================
File: esewa/signature.py
================================================
import hmac
import hashlib
import base64
import json


def generate_signature(
        total_amount: float, 
        transaction_uuid: str, 
        key: str = "8gBm/:&EnhH.1/q", 
        product_code: str = "EPAYTEST"
) -> str:
    """Generates hmac sha256 signature for eSewa payment gateway

    Args:
        total_amount (float): will be processed as a string
        transaction_uuid (str): will be processed as a string
        key (_type_, optional): your private key after buying API. Defaults to "8gBm/:&EnhH.1/q".
        product_code (str, optional): your product code from database. Defaults to "EPAYTEST".

    Raises:
        ValueError: Impropervalues for 'total_amount' and 'transaction_uuid'
        RuntimeError: Failed to generate signature

    Returns:
        str: returns the generated signature
    
    Steps:
        1. Check if total_amount and transaction_uuid are provided.
        2. Create a message string in the format "total_amount=amount,transaction_uuid=uuid,product_code=code".
        3. Encode the key and message to bytes.
        4. Generate HMAC-SHA256 digest using the key and message.
        5. Convert the digest to Base64.
        6. Return the Base64-encoded signature.
    """
    if not total_amount or not transaction_uuid:
        raise ValueError("Both 'total_amount' and 'transaction_uuid' are required.")
    try:
        message = f"total_amount={total_amount},transaction_uuid={transaction_uuid},product_code={product_code}"
        key = key.encode('utf-8')
        message = message.encode('utf-8')

        # Generate HMAC-SHA256 digest
        hmac_sha256 = hmac.new(key, message, hashlib.sha256)
        digest = hmac_sha256.digest()

        # Convert to Base64
        signature = base64.b64encode(digest).decode('utf-8')
        return signature
    except Exception as e:
        raise RuntimeError(f"Failed to generate signature: {e}")

if __name__ == "__main__":
    signature = generate_signature(total_amount=100, transaction_uuid="11-201-13")
    print(f"Generated Signature: {signature}")



def verify_signature(
    response_body_base64: str, 
) -> tuple[bool, dict[str, str] | None]:
    """
    Verifies the signature of an eSewa response.
    
    Args:
        response_body_base64 (str): The Base64-encoded response body.
        secret_key (str): The secret key for signature generation.
    
    Returns:
        bool: True if the signature is valid, False otherwise.
        dict: The response data if the signature is valid, None otherwise.
    
    Raises:
        Exception: If there is an error during verification.
    
    Steps:
        1. Decode the Base64-encoded response body.
        2. Parse the JSON response.
        3. Extract the signed field names and received signature.
        4. Generate the message to be signed.
        5. Generate the HMAC-SHA256 signature using the secret key.
        6. Compare the generated signature with the received signature.
        7. Return True and the response data if valid, False and None otherwise.
    """
    try:
            response_body_json = base64.b64decode(response_body_base64).decode("utf-8")
            response_data: dict[str, str] = json.loads(response_body_json)
            
            signed_field_names: str = response_data["signed_field_names"]
            received_signature: str = response_data["signature"]
            print(response_data)
            field_names = signed_field_names.split(",")
            print(field_names)
            message: str = ",".join(
                f"{field_name}={response_data[field_name]}" for field_name in field_names
            )
            secret="8gBm/:&EnhH.1/q".encode('utf-8')
            message = message.encode('utf-8')
            hmac_sha256 = hmac.new(secret, message, hashlib.sha256)
            digest = hmac_sha256.digest()
            signature = base64.b64encode(digest).decode('utf-8')
            print(signature)
            is_valid: bool = received_signature == signature
            return is_valid, response_data if is_valid else None
    except Exception as e:
            print(f"Error verifying signature: {e}")
            return False, None



if __name__ == "__main__":
    response_body_base64 = "eyJ0cmFuc2FjdGlvbl9jb2RlIjoiMExENUNFSCIsInN0YXR1cyI6IkNPTVBMRVRFIiwidG90YWxfYW1vdW50IjoiMSwwMDAuMCIsInRyYW5zYWN0aW9uX3V1aWQiOiIyNDA2MTMtMTM0MjMxIiwicHJvZHVjdF9jb2RlIjoiTlAtRVMtQUJISVNIRUstRVBBWSIsInNpZ25lZF9maWVsZF9uYW1lcyI6InRyYW5zYWN0aW9uX2NvZGUsc3RhdHVzLHRvdGFsX2Ftb3VudCx0cmFuc2FjdGlvbl91dWlkLHByb2R1Y3RfY29kZSxzaWduZWRfZmllbGRfbmFtZXMiLCJzaWduYXR1cmUiOiJNcHd5MFRGbEhxcEpqRlVER2ljKzIybWRvZW5JVFQrQ2N6MUxDNjFxTUFjPSJ9"

    is_valid,response_data = verify_signature(response_body_base64)
    if is_valid:
        print("Signature is valid.")
        print("Response data:", response_data)
    else:
        print("Invalid signature!", response_data)


================================================
File: esewa/utils.py
================================================



def build_request_payload():
    pass


def parse_response():
    pass




================================================
File: esewa_tests/__init__.py
================================================
__version__ = "1.0.3"

from .test_signature import TestSignature


================================================
File: esewa_tests/test_signature.py
================================================
import unittest
from esewa.signature import generate_signature

class TestEsewaSignature(unittest.TestCase):
    def test_generate_signature_valid(self):
        key = "testkey"
        total_amount = "1000"
        transaction_uuid = "1234abcd"
        product_code = "EPAYTEST"

        signature = generate_signature(total_amount, transaction_uuid, key, product_code)
        self.assertIsInstance(signature, str)
        self.assertTrue(len(signature) > 0)

    def test_generate_signature_missing_params(self):
        with self.assertRaises(ValueError):
            generate_signature("", "1234abcd")
        with self.assertRaises(ValueError):
            generate_signature("1000", "")

if __name__ == "__main__":
    unittest.main()


